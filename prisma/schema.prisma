// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  products  Product[]
}

model Product {
  id              Int              @id @default(autoincrement())
  name            String
  description     String?          @db.VarChar(800)
  price           Decimal          @db.Decimal(7, 2)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime?        @updatedAt
  category        Category         @relation(fields: [categoryId], references: [id])
  categoryId      Int
  productVariants ProductVariant[]
  pictures        Picture[]
}

model ProductVariant {
  id        String  @id @default(cuid())
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  color     Color?  @relation(fields: [colorId], references: [id])
  colorId   Int?
  size      Size?   @relation(fields: [sizeId], references: [id])
  sizeId    Int?
  price     Decimal @db.Decimal(7, 2)
  quantity  Int

  @@unique([productId, colorId, sizeId])
}

model Picture {
  id        Int     @id @default(autoincrement())
  Product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  url       String
}

model Color {
  id              Int              @id @default(autoincrement())
  name            String
  productVariants ProductVariant[]
}

model Size {
  id              Int              @id @default(autoincrement())
  name            String
  productVariants ProductVariant[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  addresses     Address[]
  orders        Order[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Address {
  id         Int    @id @default(autoincrement())
  label      String
  name       String
  phone      String
  address    String
  postalCode String
  city       String
  country    String
  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
}

model Carrier {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  price       Decimal @db.Decimal(7, 2)
}

model Order {
  id           Int          @id @default(autoincrement())
  status       String
  orderNumber  String?
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  address      String
  carrierName  String
  carrierPrice Decimal      @db.Decimal(7, 2)
  subTotal     Decimal      @db.Decimal(7, 2)
  total        Decimal      @db.Decimal(7, 2)
  createdAt    DateTime     @default(now())
  orderItems   OrderItems[]
}

model OrderItems {
  id       String  @id @default(cuid())
  order    Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId  Int
  product  String
  color    String?
  size     String?
  price    Decimal @db.Decimal(7, 2)
  quantity Int
}

model Settings {
  id String @id @default(cuid())

  freeShipping Decimal @db.Decimal(7, 2)
}
